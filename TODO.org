* Rules
** Cells
   How about a sort of simulated cell wall?
   Osmotic pressure gets to stay.
   We add viscosity which slows down flow, both in and outbound.
   
** Changing how SUCC works?
   Perceived pp
   
** Dropping diffusion?
   Not yet at least
   
** Cell input needs to have a crowdedness input
   
** Inertia?
   Aka use more than SUCC and pressure to decide next state?
   Does not seem necessary at the timescale for biological moulds, but it could
   speed up simulation.
   
** Special desire to split value?

* Doing
** TODO Regular CGP
*** TODO Append INP last?
    In this case appendNeeded must have a special check?
    Kinda not feeling this

** TODO More food smell
** TODO Make cells more resilient when pruning is likely to break the network
** TODO Move to more robust case class for cells
   What about actually pinning down coordinates in the cell?

* Later
** TODO Move to normal CGP
** TODO Figure out discrepancy in test result and final rendering
** TODO Memoize calculations in a more cache optimal way? I.e put all ops in a packed array
** TODO Try to isolate pruning yielding massive amounts of cyto.
   Maybe make this a test that always runs?
** TODO Change SM policy
   Only allow self modification at certain intervals
** TODO Move cyto, control and friends to case class members, only keep signals in array.
** TODO Make cell death transfer cyto
** TODO Start with a maze to force exploration?
*** DONE Refactor representation so adding walls wont be such a pain
*** DONE More sophisticated food layout? Try spirals for instance
**** DONE Spiral

*** TODO Make a maze
** TODO Parametrise Cell control
** TODO Add TODO items
** TODO Separate running and altering genome
* Maybe
** TODO Figure out what is going wrong with listbuffers
** TODO Special food (requiring signals)
** TODO Handle mutation through sporulation
   Allows spores to inherit genetic memory, and possibly mutation?
* Done
** DONE Allow multiple splits per cycle
** DONE Give score based on consumed food total rather than spores
** DONE Figure out why cultures die out so fast
   Even with no rent the little fucks die off
** DONE Memoize SMGC
*** DONE Something is very fucked up for listBuffer
    Seems like just forcing it fixes at least some of the perf issues
    Solution: Use ArrayBuffer
** DONE Increase amount of available signal proteins
** DONE Add food scent to adjecent squares
** DONE Find out why scores can be negative
   Happens due to cells being in negative cytoplasma

** DONE Figure out where NaN poisoning happens
   Everywhere!!
** DONE Skip A and B buffer, keep buffers in each cell
** DONE Add GA runner
*** DONE Mutate genome
** DONE Add point generation (sporulation?)
   I want sporulation to have an evolution path.
   To begin with the slime mold may create spores everywhere,
   however doing spores at one spot only might be a better strategy.
   Maybe just have the ability to make spores and figure out a better scheme later, if at all
** DONE Drain resources over time
** DONE Remove ENERGY, rely solely on CYTO
** DONE Handle special squares (food)
** DONE Better food generation algorithm
** DONE Running simulator
*** DONE Figure out what is going on with buffer switching etc
*** DONE Make it not crash
*** DONE Instantiate init genome(s)
** DONE Improve renderer
** DONE Cell control
*** DONE Implement SMCGP for Slime mold
    How much repurposing is necessary?
    Turn Graph into abstract class maybe?

*** DONE Interface between genome and chemical gradients.
    Aka create a runGenome method

**** DONE Create genome "command" => cell state function (runGenome)
     Genome should govern how the cell spends energy to generate
     + cytoplasma
     + SUCC
     + signaling proteins
     + spores (points)?

     Its inputs should be
     + signaling proteins
     + food (possibly conveyed by signalling proteins?)
     + pressure?
   
** DONE Cell genesis
** DONE Cell death

* Thoughts
